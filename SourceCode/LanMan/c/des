/*
 * CDDL HEADER START
 *
 * The contents of this file are subject to the terms of the
 * Common Development and Distribution License (the "Licence").
 * You may not use this file except in compliance with the Licence.
 *
 * You can obtain a copy of the licence at RISC OS path @.^.LICENCE
 * or  http://www.riscosdev.com/lanman98/LICENCE.CDDL
 * See the Licence for the specific language governing permissions
 * and limitations under the Licence.
 *
 * When distributing Covered Code, include this CDDL HEADER in each
 * file and include the Licence file. If applicable, add the
 * following below this CDDL HEADER, with the fields enclosed by
 * brackets "[]" replaced with your own identifying information:
 * Portions Copyright [yyyy] [name of copyright owner]
 *
 * CDDL HEADER END
 */
 
/*
 *   Copyright 1996 Warm Silence Software Ltd.  All rights reserved.
 *   Use is subject to license terms.
 */

/*   PHBG 1/8/98: Initial version
 */

#include <string.h>
#include "LanMan98BaseLib/memory.h"

#include "des.h"

#define OCT2SEPT(n) ((n) - (n)/8)
#define SEPT2OCT(n) ((n) + (n)/7)
#define QUAD2OCT(n) ((n) + ((n)/4)*4)
#define LRSWAP(n) ((n) < 64 ? (n)+64 : (n)-64)

struct des_key_s
{
    char K[16][8];
};

static char PC1[] =
{
    57, 49, 41, 33, 25, 17,  9,
     1, 58, 50, 42, 34, 26, 18,
    10,  2, 59, 51, 43, 35, 27,
    19, 11,  3, 60, 52, 44, 36,
    63, 55, 47, 39, 31, 23, 15,
     7, 62, 54, 46, 38, 30, 22,
    14,  6, 61, 53, 45, 37, 29,
    21, 13,  5, 28, 20, 12,  4
};

static char NLS[] = {1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1};

static char PC2[] =
{
    14, 17, 11, 24,  1,  5,
     3, 28, 15,  6, 21, 10,
    23, 19, 12,  4, 26,  8,
    16,  7, 27, 20, 13,  2,
    41, 52, 31, 37, 47, 55,
    30, 40, 51, 45, 33, 48,
    44, 49, 39, 56, 34, 53,
    46, 42, 50, 36, 29, 32
};

static char IP[] =
{
    58, 50, 42, 34, 26, 18, 10,  2,
    60, 52, 44, 36, 28, 20, 12,  4,
    62, 54, 46, 38, 30, 22, 14,  6,
    64, 56, 48, 40, 32, 24, 16,  8,
    57, 49, 41, 33, 25, 17,  9,  1,
    59, 51, 43, 35, 27, 19, 11,  3,
    61, 53, 45, 37, 29, 21, 13,  5,
    63, 55, 47, 39, 31, 23, 15,  7
};

static char S[][64] =
{
    {
        14,  4, 13,  1,  2, 15, 11,  8,  3, 10,  6, 12,  5,  9,  0,  7,
         0, 15,  7,  4, 14,  2, 13,  1, 10,  6, 12, 11,  9,  5,  3,  8,
         4,  1, 14,  8, 13,  6,  2, 11, 15, 12,  9,  7,  3, 10,  5,  0,
        15, 12,  8,  2,  4,  9,  1,  7,  5, 11,  3, 14, 10,  0,  6, 13
    },
    {
        15,  1,  8, 14,  6, 11,  3,  4,  9,  7,  2, 13, 12,  0,  5, 10,
         3, 13,  4,  7, 15,  2,  8, 14, 12,  0,  1, 10,  6,  9, 11,  5,
         0, 14,  7, 11, 10,  4, 13,  1,  5,  8, 12,  6,  9,  3,  2, 15,
        13,  8, 10,  1,  3, 15,  4,  2, 11,  6,  7, 12,  0,  5, 14,  9
    },
    {
        10,  0,  9, 14,  6,  3, 15,  5,  1, 13, 12,  7, 11,  4,  2,  8,
        13,  7,  0,  9,  3,  4,  6, 10,  2,  8,  5, 14, 12, 11, 15,  1,
        13,  6,  4,  9,  8, 15,  3,  0, 11,  1,  2, 12,  5, 10, 14,  7,
         1, 10, 13,  0,  6,  9,  8,  7,  4, 15, 14,  3, 11,  5,  2, 12
    },
    {
         7, 13, 14,  3,  0,  6,  9, 10,  1,  2,  8,  5, 11, 12,  4, 15,
        13,  8, 11,  5,  6, 15,  0,  3,  4,  7,  2, 12,  1, 10, 14,  9,
        10,  6,  9,  0, 12, 11,  7, 13, 15,  1,  3, 14,  5,  2,  8,  4,
         3, 15,  0,  6, 10,  1, 13,  8,  9,  4,  5, 11, 12,  7,  2, 14
    },
    {
         2, 12,  4,  1,  7, 10, 11,  6,  8,  5,  3, 15, 13,  0, 14,  9,
        14, 11,  2, 12,  4,  7, 13,  1,  5,  0, 15, 10,  3,  9,  8,  6,
         4,  2,  1, 11, 10, 13,  7,  8, 15,  9, 12,  5,  6,  3,  0, 14,
        11,  8, 12,  7,  1, 14,  2, 13,  6, 15,  0,  9, 10,  4,  5,  3
    },
    {
        12,  1, 10, 15,  9,  2,  6,  8,  0, 13,  3,  4, 14,  7,  5, 11,
        10, 15,  4,  2,  7, 12,  9,  5,  6,  1, 13, 14,  0, 11,  3,  8,
         9, 14, 15,  5,  2,  8, 12,  3,  7,  0,  4, 10,  1, 13, 11,  6,
         4,  3,  2, 12,  9,  5, 15, 10, 11, 14,  1,  7,  6,  0,  8, 13
    },
    {
         4, 11,  2, 14, 15,  0,  8, 13,  3, 12,  9,  7,  5, 10,  6,  1,
        13,  0, 11,  7,  4,  9,  1, 10, 14,  3,  5, 12,  2, 15,  8,  6,
         1,  4, 11, 13, 12,  3,  7, 14, 10, 15,  6,  8,  0,  5,  9,  2,
         6, 11, 13,  8,  1,  4, 10,  7,  9,  5,  0, 15, 14,  2,  3, 12
    },
    {
        13,  2,  8,  4,  6, 15, 11,  1, 10,  9,  3, 14,  5,  0, 12,  7,
         1, 15, 13,  8, 10,  3,  7,  4, 12,  5,  6, 11,  0, 14,  9,  2,
         7, 11,  4,  1,  9, 12, 14,  2,  0,  6, 10, 13, 15,  3,  5,  8,
         2,  1, 14,  7,  4, 10,  8, 13, 15, 12,  9,  0,  3,  5,  6, 11
    }
};

static char P[] =
{
    16,  7, 20, 21,
    29, 12, 28, 17,
     1, 15, 23, 26,
     5, 18, 31, 10,
     2,  8, 24, 14,
    32, 27,  3,  9,
    19, 13, 30,  6,
    22, 11,  4, 25
};

static int bit_set(char *s, int b)
{
    return (s[b/8] & (0x80 >> (b&7))) != 0;
}

static void set_bit(char *s, int b)
{
    s[b/8] |= (0x80 >> (b&7));
}

static void left_rot(char *s)
{
    int carry, acc, i;

    carry = (s[0] & 0x80) >> 6;
    for(i = 3; i >= 0; i--)
    {
        acc = s[i];
        s[i] = (acc << 1) | carry;
        carry = (acc & 0x80) >> 6;
    }
}

static int reordSEXT2OCT(int i)
{
    int n, m;

    n = i/6;
    switch(i%6)
    {
        case 0: m = 0; break;
        case 5: m = 1; break;
        default: m = i%6 + 1;
    }
    return n*8 + m;
}

static void expand(char *R)
{
    int i;

    for(i = 0; i < 8; i++)
    {
        R[i] |= (R[(i+1)&7] & 0x8) << 1;
        R[i] |= (R[(i-1)&7] & 0x1) << 5;
    }
}

des_key_t DesKey(char *s)
{
    des_key_t k;
    char PC1_s[8];
    int i, j;

    k = Malloc(sizeof(*k));
    memset(k, 0, sizeof(*k));
    memset(PC1_s, 0, 8);
    for(i = 0; i < 56; i++)
        if(bit_set(s, OCT2SEPT(PC1[i]-1)))
            set_bit(PC1_s, SEPT2OCT(i));
    for(j = 0; j < 16; j++)
    {
        left_rot(PC1_s);
        left_rot(PC1_s+4);
        if(NLS[j] > 1)
        {
            left_rot(PC1_s);
            left_rot(PC1_s+4);
        }
        for(i = 0; i < 48; i++)
            if(bit_set(PC1_s, SEPT2OCT(PC2[i]-1)))
                set_bit(k->K[j], reordSEXT2OCT(i)+2);
    }
    return k;
}

void DesKeyDestruct(des_key_t k)
{
    Free(k);
}

void DesEncrypt(des_key_t k, char *in, char *out)
{
    char LR[16], OldR[8], fRK[8], *L, *R;
    int i, j;

    L = LR;
    R = LR+8;
    memset(LR, 0, 16);
    for(i = 0; i < 64; i++)
        if(bit_set(in, IP[i]-1))
            set_bit(LR, QUAD2OCT(i)+4);
    for(j = 0; j < 16; j++)
    {
        memcpy(OldR, R, 8);
        expand(R);
        for(i = 0; i < 8; i++)
            R[i] = S[i][R[i]^k->K[j][i]];
        memset(fRK, 0, 8);
        for(i = 0; i < 32; i++)
            if(bit_set(R, QUAD2OCT(P[i]-1)+4))
                set_bit(fRK, QUAD2OCT(i)+4);
        for(i = 0; i < 8; i++)
            R[i] = L[i]^fRK[i];
        memcpy(L, OldR, 8);
    }
    memset(out, 0, 8);
    for(i = 0; i < 64; i++)
        if(bit_set(LR, LRSWAP(QUAD2OCT(i)+4)))
            set_bit(out, IP[i]-1);
}
